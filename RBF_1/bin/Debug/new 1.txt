#include &lt;opencv/cvaux.h&gt;
#include &lt;opencv/highgui.h&gt;
#include &lt;opencv/cxcore.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;
#include &lt;math.h&gt;
#include &lt;float.h&gt;
#include &lt;limits.h&gt;
#include &lt;time.h&gt;
#include &lt;ctype.h&gt;
int main(int argc, char* argv[])
{
    // Default capture size - 640x480
    CvSize size = cvSize(640,480);
    // Open capture device. 0 is /dev/video0, 1 is /dev/video1, etc.
    CvCapture* capture = cvCaptureFromCAM( 0 );
    if( !capture )
    {
            fprintf( stderr, &quot;ERROR: capture is NULL \n&quot; );
            getchar();
            return -1;
    }
    // Create a window in which the captured images will be presented
    cvNamedWindow( &quot;Camera&quot;, CV_WINDOW_AUTOSIZE );
    cvNamedWindow( &quot;HSV&quot;, CV_WINDOW_AUTOSIZE );
    cvNamedWindow( &quot;EdgeDetection&quot;, CV_WINDOW_AUTOSIZE );
    // Detect a red ball
    CvScalar hsv_min = cvScalar(150, 84, 130, 0);
    CvScalar hsv_max = cvScalar(358, 256, 255, 0);
    IplImage *  hsv_frame    = cvCreateImage(size, IPL_DEPTH_8U, 3);
    IplImage*  thresholded   = cvCreateImage(size, IPL_DEPTH_8U, 1);
    while( 1 )
    {
        // Get one frame
        IplImage* frame = cvQueryFrame( capture );
        if( !frame )
        {
                fprintf( stderr, &quot;ERROR: frame is null...\n&quot; );
                getchar();
                break;
        }
        // Covert color space to HSV as it is much easier to filter colors in the HSV color-space.
        cvCvtColor(frame, hsv_frame, CV_BGR2HSV);
        // Filter out colors which are out of range.
        cvInRangeS(hsv_frame, hsv_min, hsv_max, thresholded);
        // Memory for hough circles
        CvMemStorage* storage = cvCreateMemStorage(0);
        // hough detector works better with some smoothing of the image
        cvSmooth( thresholded, thresholded, CV_GAUSSIAN, 9, 9 );
        CvSeq* circles = cvHoughCircles(thresholded, storage, CV_HOUGH_GRADIENT, 2,
                                        thresholded-&gt;height/4, 100, 50, 10, 400);
        for (int i = 0; i &lt; circles-&gt;total; i++)
        {
            float* p = (float*)cvGetSeqElem( circles, i );
            printf(&quot;Ball! x=%f y=%f r=%f\n\r&quot;,p[0],p[1],p[2] );
            cvCircle( frame, cvPoint(cvRound(p[0]),cvRound(p[1])),
                                    3, CV_RGB(0,255,0), -1, 8, 0 );
            cvCircle( frame, cvPoint(cvRound(p[0]),cvRound(p[1])),
                                    cvRound(p[2]), CV_RGB(255,0,0), 3, 8, 0 );
        }
        cvShowImage( &quot;Camera&quot;, frame ); // Original stream with detected ball overlay
        cvShowImage( &quot;HSV&quot;, hsv_frame); // Original stream in the HSV color space
        cvShowImage( &quot;After Color Filtering&quot;, thresholded ); // The stream after color filtering
        cvReleaseMemStorage(&amp;storage);
        // Do not release the frame!
        //If ESC key pressed, Key=0x10001B under OpenCV 0.9.7(linux version),
        //remove higher bits using AND operator
        if( (cvWaitKey(10) &amp; 255) == 27 ) break;
    }
     // Release the capture device housekeeping
     cvReleaseCapture( &amp;capture );
     cvDestroyWindow( &quot;mywindow&quot; );
     return 0;
   }